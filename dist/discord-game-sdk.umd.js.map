{"version":3,"file":"discord-game-sdk.umd.js","sources":["../js/native.ts","../js/types.ts","../js/Discord.ts"],"sourcesContent":["import {\n  DiscordOptions,\n  DiscordResult,\n  Activity,\n  User,\n  InviteCallback,\n  UserManager,\n} from \"./types\";\nimport bindings from \"bindings\";\n\ndeclare class Discord {\n  constructor(clientId: number, options?: DiscordOptions);\n\n  /**\n   * Initializes the UserManager if necessary and returns it.\n   */ \n  getUserManager(): UserManager;\n\n  /**\n   * Runs the pending Discord callbacks.\n   * Note that this will be called automatically unless {@link DiscordOptions.disableInterval} is set to true.\n   * To be called very regularly.\n   */\n  runCallbacks(): void;\n\n  /**\n   * Returns the current status of the Discord SDK.\n   */\n  getStatus(): DiscordResult;\n\n  updateActivity(newActivity: Activity): Promise<DiscordResult>;\n\n  /**\n   * Add an events listener for a discord event.\n   * @param eventType The type of event to listen to.\n   * @param cb The callback for that event.\n   */\n  on(eventType: \"userUpdate\", cb: () => void): number;\n  on(eventType: \"joinRequest\", cb: (user: User) => void): number;\n  on(eventType: \"join\" | \"spectate\", cb: (secret: string) => void): number;\n  on(eventType: \"invite\", cb: InviteCallback): number;\n}\n\n// Apply the types to the untyped native module.\nconst DiscordNative = bindings(\"binding\").DiscordNative as typeof Discord;\n\nexport { DiscordNative };\n","/**\n * A discord result code.\n * See https://discord.com/developers/docs/game-sdk/discord#data-models-result-enum\n * for the meaning of the code.\n */\nexport enum DiscordResult {\n  Ok = 0,\n  ServiceUnavailable = 1,\n  InvalidVersion = 2,\n  LockFailed = 3,\n  InternalError = 4,\n  InvalidPayload = 5,\n  InvalidCommand = 6,\n  InvalidPermissions = 7,\n  NotFetched = 8,\n  NotFound = 9,\n  Conflict = 10,\n  InvalidSecret = 11,\n  InvalidJoinSecret = 12,\n  NoEligibleActivity = 13,\n  InvalidInvite = 14,\n  NotAuthenticated = 15,\n  InvalidAccessToken = 16,\n  ApplicationMismatch = 17,\n  InvalidDataUrl = 18,\n  InvalidBase64 = 19,\n  NotFiltered = 20,\n  LobbyFull = 21,\n  InvalidLobbySecret = 22,\n  InvalidFilename = 23,\n  InvalidFileSize = 24,\n  InvalidEntitlement = 25,\n  NotInstalled = 26,\n  NotRunning = 27,\n  InsufficientBuffer = 28,\n  PurchaseCanceled = 29,\n  InvalidGuild = 30,\n  InvalidEvent = 31,\n  InvalidChannel = 32,\n  InvalidOrigin = 33,\n  RateLimited = 34,\n  OAuth2Error = 35,\n  SelectChannelTimeout = 36,\n  GetGuildTimeout = 37,\n  SelectVoiceForceRequired = 38,\n  CaptureShortcutAlreadyListening = 39,\n  UnauthorizedForAchievement = 40,\n  InvalidGiftCode = 41,\n  PurchaseError = 42,\n  TransactionAborted = 43,\n}\n\nexport enum PremiumType {\n  None = \"None\",\n  Tier1 = \"Tier1\",\n  Tier2 = \"Tier2\",\n}\n\n/**\n * A discord user's data.\n *\n * @example\n * ```js\n * {\n *   isBot: false,\n *   username: 'arthuro555',\n *   avatar: '13fc7e7e6969c3608e97c56bd86c741a',\n *   discriminator: '9738',\n *   id: 425714310262816776n,\n * }\n * ```\n */\nexport interface User {\n  /**\n   * True is the user is a bot.\n   */\n  isBot: boolean;\n\n  /**\n   * The username of the user.\n   */\n  username: string;\n\n  /**\n   * The hash of the avatar of the user.\n   * You can get the avatar image from the discord cdn at\n   * https://cdn.discordapp.com/avatars/${user.id}/${user.avatar}.png\n   * See https://discord.com/developers/docs/reference#image-formatting\n   */\n  avatar: string;\n\n  /**\n   * The user discriminator, also know as tag.\n   * This is the 4 digits after the # in the discord identifier.\n   */\n  discriminator: string;\n\n  /**\n   * The unique user ID.\n   */\n  id: Number;\n}\n\n/**\n * Unix timestamps of an activity.\n */\nexport interface ActivityTimestamps {\n  start?: number;\n  end?: number;\n}\n\n/**\n * Assets displayed on an activity.\n */\nexport interface ActivityAssets {\n  largeImage?: string;\n  largeText?: string;\n  smallImage?: string;\n  smallText?: string;\n}\n\n/**\n * Size information on a party of an activity.\n */\nexport interface ActivityPartySize {\n  /**\n   * The amount of players in the party.\n   */\n  currentSize?: number;\n\n  /**\n   * The maximum amount of players in the party.\n   */\n  maxSize?: number;\n}\n\n/**\n * A party of an activity.\n */\nexport interface ActivityParty {\n  /**\n   * The unique identifier/name of the party.\n   */\n  id?: string;\n\n  /**\n   * The size information of the party.\n   */\n  size?: ActivityPartySize;\n}\n\n/**\n * A party of an activity.\n */\nexport interface ReadonlyActivityParty {\n  /**\n   * The unique identifier/name of the party.\n   */\n  id: string;\n\n  /**\n   * The size information of the party.\n   */\n  size: Readonly<Required<ActivityPartySize>>;\n}\n\n/**\n * Secrets of an activity.\n */\nexport interface ActivitySecrets {\n  join?: string;\n  match?: string;\n  spectate?: string;\n}\n\n/**\n * An activity, also known as Rich Presence data, of the current user.\n */\nexport interface Activity {\n  /**\n   * The current game state of the user.\n   */\n  state?: string;\n\n  /**\n   * Details on the game state of the user.\n   */\n  details?: string;\n\n  /**\n   * True if the user is currently in a match.\n   */\n  instance?: boolean;\n\n  /**\n   * Assets displayed by the activity.\n   */\n  assets?: ActivityAssets;\n\n  /**\n   * Start and end timestamps of the activity.\n   */\n  timestamps?: ActivityTimestamps;\n\n  /**\n   * Information on the party of the user.\n   */\n  party?: ActivityParty;\n\n  /**\n   * The secrets necessary to join the users party.\n   */\n  secrets?: ActivitySecrets;\n}\n\n/**\n * An activity, also known as Rich Presence payload, of another user.\n */\ninterface _ReadonlyActivity extends Activity {\n  /**\n   * The ID of the application the user is using.\n   */\n  appId: string;\n\n  /**\n   * The name of the application the user is using.\n   */\n  name: string;\n\n  assets: Readonly<Required<ActivityAssets>>;\n  timestamps: Readonly<Required<ActivityTimestamps>>;\n  party: ReadonlyActivityParty;\n  secrets: Readonly<Required<ActivitySecrets>>;\n}\n\nexport type ReadonlyActivity = Readonly<Required<_ReadonlyActivity>>;\n\n/**\n * A callback for the invite event.\n * @param type - The type of invitation.\n * @param user - The user who sent the invitation.\n * @param activity - The activity of the user who sent the invitation.\n */\nexport type InviteCallback = (\n  type: \"join\" | \"spectate\",\n  user: User,\n  activity: ReadonlyActivity\n) => void;\n\n/**\n * Optional settings for the {@link Discord} contructor.\n */\nexport interface DiscordOptions {\n  /**\n   * If true, require discord to be present to initialize the sdk.\n   * @default false\n   */\n  requireDiscord?: boolean;\n\n  /**\n   * The interval in milliseconds between each\n   * update with the Discord client.\n   * @default 200\n   */\n  callbacksInterval?: number;\n\n  /**\n   * Disables the automatic setInterval for the callbacks.\n   * To use if you want to integrate running callbacks in your own events loop.\n   * @default false\n   */\n  disableInterval?: boolean;\n}\n\nexport declare class UserManager {\n  /**\n   * Get the current user's data.\n   */\n  getCurrentUser(): Promise<User>;\n\n  /**\n   * Get informations on a specific user.\n   * @param userId The user to get information from.\n   */\n  getUser(userId: Number): Promise<User>;\n}\n","import { DiscordNative } from \"./native\";\nimport { DiscordOptions } from \"./types\";\n\n/**\n * The Discord Game SDK wrapper class. Initialize it with your client ID.\n * You can get a client ID from the discord developer portal:\n * https://discord.com/developers/applications\n *\n * @example Initialize a discord client\n * ```js\n * const Discord = require('discord-game-sdk');\n * const client = new Discord(461618159171141643);\n * ```\n *\n * @example Initialize a discord client that requires discord\n * ```js\n * const Discord = require('discord-game-sdk');\n * const client = new Discord(461618159171141643, { requireDiscord: true });\n * ```\n */\nexport class Discord extends DiscordNative {\n  private readonly _timer: NodeJS.Timer;\n  constructor(clientId: number, options?: DiscordOptions) {\n    // Run native contructor\n    super(clientId, options);\n\n    // Schedule the callbacks\n    const { callbacksInterval } = options || {};\n    let timeout = callbacksInterval || 200;\n    this._timer = setInterval(() => {\n      try {\n        this.runCallbacks();\n      } catch (e) {\n        console.error(\"Error while running discord callback: \", e);\n      }\n    }, timeout);\n  }\n\n  /**\n   * To be called when done with the Discord SDK. \n   * Clears the callbacks timer.\n   */\n  destroy() {\n    clearInterval(this._timer);\n  }\n}\n"],"names":["DiscordNative","DiscordResult","PremiumType","constructor","clientId","options","super","_timer","callbacksInterval","this","setInterval","runCallbacks","e","console","error","destroy","clearInterval"],"mappings":"4VA4CA,MAAMA,eAAyB,WAAWA,cCvC1C,IAAYC,EA+CAC,0BA/CAD,EAAAA,kBAAAA,kCAEVA,+CACAA,uCACAA,+BACAA,qCACAA,uCACAA,uCACAA,+CACAA,+BACAA,2BACAA,4BACAA,sCACAA,8CACAA,gDACAA,sCACAA,4CACAA,gDACAA,kDACAA,wCACAA,sCACAA,kCACAA,8BACAA,gDACAA,0CACAA,0CACAA,gDACAA,oCACAA,gCACAA,gDACAA,4CACAA,oCACAA,oCACAA,wCACAA,sCACAA,kCACAA,kCACAA,oDACAA,0CACAA,4DACAA,0EACAA,gEACAA,0CACAA,sCACAA,gDAGUC,sBAAAA,EAAAA,gBAAAA,+BAEVA,gBACAA,wCCnC2BF,EAE3BG,YAAYC,EAAkBC,GAE5BC,MAAMF,EAAUC,QAHDE,SAMf,MAAMC,kBAAEA,GAAsBH,GAAW,GAEzCI,KAAKF,EAASG,YAAY,KACxB,IACED,KAAKE,eACL,MAAOC,GACPC,QAAQC,MAAM,yCAA0CF,KAL9CJ,GAAqB,KAcrCO,UACEC,cAAcP,KAAKF"}